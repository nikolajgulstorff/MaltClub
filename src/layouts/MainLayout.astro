---
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import AgeVerification from "../components/AgeVerification.astro";
import '../styles/tailwind.css';
import 'animate.css';
const { title } = Astro.props;

---
<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>

		<link href="https://fonts.googleapis.com/css2?family=Lora:ital,wght@0,400..700;1,400..700&display=swap" rel="stylesheet">
		<link href="https://fonts.googleapis.com/css2?family=Lora:ital,wght@0,400..700;1,400..700&family=Urbanist:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet">
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>{Astro.props.title}</title>
	</head>
	<body>
		<AgeVerification />
		<div class="relative w-full overflow-hidden bg-neutral-500">
		  <svg id="svg-mask" class="absolute top-0 left-0 w-full h-full">
			<defs>
			  <clipPath id="clip">
				<circle cx="20%" cy="20%" r="0" id="circle-mask" />
			  </clipPath>
			</defs>
		  </svg>
		  <div class="relative top-0 left-0 bg-gradient-to-r from-[#16312B] to-[#0C1C19] transition-all duration-300 ease-out" style="clip-path: url(#clip)">
			<header>
			  <Header></Header>
			</header>
	  
			<main>
				<slot></slot>
			  </main>
			  
			  <script>
				import { animate, inView } from "motion";
			  
				// Animate the circle scaling in from the bottom center
				window.addEventListener('load', () => {
				  const circleMask = document.getElementById('circle-mask');
				  circleMask.setAttribute("cx", "50%"); // Center horizontally
				  circleMask.setAttribute("cy", "100%"); // Bottom vertically
			  
				  animate(circleMask, 
					{ 
					  r: ['30', '150%'] // Scale radius from 0 to large size
					},
					{
					  duration: 2.0,  // Quick animation
					  ease: 'ease-in-out' // Smooth scaling in and out
					}
				  );
				});
			  
				// Animate all elements with the class "main-content" when their children come into view
				document.addEventListener('DOMContentLoaded', () => {
				  const mainContents = document.querySelectorAll('.main-content');
			  
				  mainContents.forEach((mainContent) => {
					const children = Array.from(mainContent.children);
			  
					children.forEach((child) => {
					  // Use inView to detect when the element enters the viewport
					  inView(child, ({ target }) => {
						animate(target, 
						  { 
							opacity: [0, 1], // Fade in
							transform: ['translateY(50px) scale(0.8)', 'translateY(0px) scale(1.0)'] // Move up and scale
						  },
						  {
							duration: 0.8, // Duration of the animation
							easing: 'ease-out'
						  }
						);
					  });
					});
				  });
				});
			  </script>